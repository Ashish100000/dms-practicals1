// 1. Create a class SET. Create member functions to perform the following SET
// operations:
// 1) is member: check whether an element belongs 1 the set or not and return valu
// as
// true/false
// 2) powerset: list all the elements of the power set of a set
// 3) subset: Check whether one set is a subset of the other or not.
// 4) union and Intersection of two Sets.
// 5) complement: Assume Universal Set as pe the input elements from the user. 6) set Difference and Symmetric Difference between two sets.
// 7) cartesian Product of Sets

#include <iostream>
#include <unordered_set>
#include <vector>
#include <algorithm>
#include <set>
#include <utility>

using namespace std;

class Set {
public:
    unordered_set<int> elementSet;
    vector<int> elementsVector;
    set<int> universalSet;

    void addElement(int element) {
        elementSet.insert(element);
        elementsVector.push_back(element);
    }

    void addUniversalElement(int element) {
        universalSet.insert(element);
    }

    bool isMember(int element) {
        return elementSet.count(element) > 0;
    }

    vector<vector<int>> powerSet() {
        int n = elementsVector.size();
        int numSubsets = 1 << n;
        vector<vector<int>> result;

        for (int i = 0; i < numSubsets; i++) {
            vector<int> subset;

            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    subset.push_back(elementsVector[j]);
                }
            }

            result.push_back(subset);
        }
        return result;
    }
    
    bool isSubset(const Set& other) const{
        for (int element: other.elementSet) {
            if (elementSet.count(element) == 0) { 
                return false;
            }
        }
        return true;
    }

    Set setUnion(const Set& other) const {
        Set result = *this;

        for (int element : other.elementSet) {
            result.elementSet.insert(element);
        }
        return result;
    }

    Set intersection(const Set& other) const {
        Set result;

        for (int element : elementSet) {
            if (other.elementSet.count(element) > 0) {
                result.elementSet.insert(element);
            }
        }
        return result;
    }

    Set setDifference(const Set& other) const {
        Set result = *this;

        for (int element : other.elementSet) {
            result.elementSet.erase(element);
        }

        return result;
    }

    set<int> complement() const {
        set<int> complementSet;
        for (int element : universalSet) {
            if (elementSet.find(element) == elementSet.end()) {
                complementSet.insert(element);
            }
        }
        return complementSet;
    }

    Set symmetricDifference(const Set& other) const {
        Set result;

        for (int element : elementSet) {
            if (other.elementSet.count(element) == 0) {
                result.elementSet.insert(element);
            }
        }

        for (int element : other.elementSet) {
            if (elementSet.count(element) == 0) {
                result.elementSet.insert(element);
            }
        }

        return result;
    }

    vector<pair<int, int>> cartesianProduct(const Set& other) const {
        vector<pair<int, int>> result;

        for (int element1 : elementSet) {
            for (int element2 : other.elementSet) {
                result.emplace_back(element1, element2);
            }
        }
        return result;
    }


};

int main() {
    Set mySet;
    mySet.addElement(1);
    mySet.addElement(2);
    mySet.addElement(3);
    
    Set mySet2;
    mySet2.addElement(1);
    mySet2.addElement(2);

    Set mySet3;
    mySet3.addElement(3);
    mySet3.addElement(4);

    Set mySet4;
    mySet4.addElement(2);
    mySet4.addElement(3);
    mySet4.addElement(4);

    mySet.addUniversalElement(1);
    mySet.addUniversalElement(2);
    mySet.addUniversalElement(3);
    mySet.addUniversalElement(4);

    cout << "Is member: " << mySet.isMember(1) << endl;

    vector<vector<int>> powerSet = mySet.powerSet();

    cout<<"Power set: "<<"\n";
    for (const auto& subset: powerSet){
        cout << "{ ";
        for (int element : subset){
            cout << element << " ";
        }
        cout << "}" << endl;
    }

    cout<< "Set 2 is a subset of Set 1: "<<mySet.isSubset(mySet2)<<"\n";
    cout<< "Set 3 is a subset of Set 1: "<<mySet.isSubset(mySet3)<<"\n";

    Set setUnion = mySet.setUnion(mySet4);
    Set intersection = mySet.intersection(mySet4);

    cout << "Set Union: ";
    for (int element : setUnion.elementSet) {
        cout << element << " ";
    }
    cout << endl;

    cout << "Intersection: ";
    for (int element : intersection.elementSet) {
        cout << element << " ";
    }
    cout << endl;
    
    set<int> complementSet = mySet.complement();
    
    cout << "Complement Set: ";
    for (int element : complementSet) {
        cout << element << " ";
    }
    cout << endl;
    
    Set setDifference = mySet.setDifference(mySet4);
    Set symmetricDifference = mySet.symmetricDifference(mySet4);

    cout << "Set Difference (set1 - set2): ";
    for (int element : setDifference.elementSet) {
        cout << element << " ";
    }
    cout << endl;

    cout << "Symmetric Difference: ";
    for (int element : symmetricDifference.elementSet) {
        cout << element << " ";
    }
    cout << endl;

    vector<pair<int, int>> cartesianProduct = mySet.cartesianProduct(mySet4);

    cout << "Cartesian Product:" << endl;
    for (const auto& pair : cartesianProduct) {
        cout << "(" << pair.first << ", " << pair.second << ")" << endl;
    }    

    return 0;
}
